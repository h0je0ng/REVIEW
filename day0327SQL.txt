CREATE TABLE 학과(
	학과번호 CHAR(2),
	학과명 VARCHAR(20) NOT NULL,
	학과장명 VARCHAR(20),
	PRIMARY KEY(학과번호)
);



CREATE TABLE 학생(
    학번 CHAR(5) PRIMARY KEY,
    이름 VARCHAR(20) NOT NULL,
    생일 DATE NOT NULL,
    연락처 VARCHAR(20) UNIQUE,
    학과번호 CHAR(2) REFERENCES 학과(전화번호),
    성별 CHAR(1) CHECK (성별 IN ('남', '여')),
    등록일 DATE DEFAULT CURDATE()
);


CREATE TABLE 학생 (
    학번 CHAR(5),
    이름 VARCHAR(20) NOT NULL,
    생일 DATE NOT NULL,
    연락처 VARCHAR(20),
    학과번호 CHAR(2),
    성별 CHAR(1),
    등록일 DATE DEFAULT CURDATE(),
    PRIMARY KEY (학번),
    UNIQUE (연락처),
    CHECK (성별 IN ('남', '여')),
    FOREIGN KEY (학과번호) REFERENCES 학과(학과번호)
);

-- 과목테이블생성 
-- 컬럼명       데이터타입        제약조건
-- 과목번호     고정문자형 5자    기본키
-- 과목명       가변문자형20자    필수입력
-- 학점         정수형           필수입력,2-4학점 사이 입력
-- 구분         가변문자형 20자   전공,교양,일반만 입력가능

CREATE TABLE 과목(
		과목번호 CHAR(5) PRIMARY KEY,
		과목명 VARCHAR(20) NOT NULL,
		학점 INT NOT NULL CHECK(학점 BETWEEN 2 AND 4), 
		구분 VARCHAR(20) CHECK(구분 IN('전공','교양','일반'))
);

-- 수강_1 테이블 생성
-- 기본키 : 수강년도, 수강학기, 학번, 과목번호

-- 컬럼명 데이터타입 제약조건
-- 수강년도 고정문자형4자 필수입력
-- 수강학기 가변문자형 20자 필수입력, 1학기, 2학기, 여름학기 , 겨울학기만 가능
-- 학번 고정문자형 5자 필수입력, 학생 테이블의 학번 참조
-- 과목번호 고정문자형 5자 필수입력, 과목테이블의 과목번호 참조
-- 성적 실수형 0부터 4.5까지 입력가능


CREATE TABLE 수강_1 (
    수강년도 CHAR(4) NOT NULL,
    수강학기 VARCHAR(20) NOT NULL,
    학번 CHAR(5) NOT NULL,
    과목번호 CHAR(5) NOT NULL,
    성적 DECIMAL(3,1),
    PRIMARY KEY (수강년도, 수강학기, 학번, 과목번호),
    FOREIGN KEY (학번) REFERENCES 학생(학번),
    FOREIGN KEY (과목번호) REFERENCES 과목(과목번호),
    CHECK(성적 BETWEEN 0 AND 4.5),
    CHECK(수강학기 IN('1학기','2학기','여름학기','겨울학기'))
);

CREATE TABLE 수강_2 (
	 수강번호 INT PRIMARY KEY AUTO_INCREMENT,
    수강년도 CHAR(4) NOT NULL,
    수강학기 VARCHAR(20) NOT NULL,
    학번 CHAR(5) NOT NULL,
    과목번호 CHAR(5) NOT NULL,
    성적 DECIMAL(3,1),
    FOREIGN KEY (학번) REFERENCES 학생(학번),
    FOREIGN KEY (과목번호) REFERENCES 과목(과목번호),
    CHECK(성적 BETWEEN 0 AND 4.5),
    CHECK(수강학기 IN('1학기','2학기','여름학기','겨울학기'))
);

INSERT INTO 학과
VALUES('AA','컴퓨터공학과','전원우');

INSERT INTO 학과
VALUES('BB','소프트웨어공학과','정자바');

INSERT INTO 학과
VALUES('CC','디자인학과','김남준');

INSERT INTO 학생(학번,이름,생일,학과번호)
VALUES('S0001','전원우','1996-07-07', 'AA');

INSERT INTO 학생(학번,이름,생일,학과번호)
VALUES('S0002','김민규','1997-4-07', 'AA');

INSERT INTO 학생(학번,이름,생일,학과번호)
VALUES('S0003','김남준','1998-08-08', 'CC');
-- 외래키의 참조무결성 : 기본키가 가진값만 가지고 올수 있다 !! DD->CC로 변경


INSERT INTO 과목(과목번호,과목명,구분,학점)
VALUES('C0001','데이터베이스 실습','전공',3);

INSERT INTO 과목(과목번호,과목명,구분,학점)
VALUES('C0002','데이터베이스 설계','전공',3);

INSERT INTO 과목(과목번호,과목명,구분,학점)
VALUES('C0003','데이터베이스 분석','전공',3);


INSERT INTO 수강_1(수강년도,수강학기,학번,과목번호,학점)
VALUES('2023','1학기','S0001','C0001',4.3);

INSERT INTO 수강_1(수강년도,수강학기,학번,과목번호,학점)
VALUES('2023','1학기','S0001','C0002',4.5);
-- 기본키가 여러개 면 기본키들 끼리 더해져서 사용됨

INSERT INTO 수강_1(수강년도,수강학기,학번,과목번호,학점)
VALUES('2023','1학기','S0002','C0001',4.3);
-- 'S0002' ->내용이 다르면은 따로 인식해서 들어가서 오류 X 



INSERT INTO 수강_2(수강년도,수강학기,학번,과목번호,성적)
VALUES('2023','1학기','S0001','C0001',4.3);

INSERT INTO 수강_2(수강년도,수강학기,학번,과목번호,성적)
VALUES('2023','1학기','S0001','C0001', 4.5);

INSERT INTO 수강_2(수강년도,수강학기,학번,과목번호,성적)
VALUES('2023','1학기','S0002','C0001',4.3);

-- 학생 테이블의 학번컬럼에 제약조건을 추가
-- 조건: 모든 학번은 S로 시작한다

ALTER TABLE 학생
ADD CONSTRAINT CHECK(학번 LIKE 'S%');

ALTER TABLE 학생
DROP CONSTRAINT 연락처;

ALTER TABLE 학생
DROP CONSTRAINT CONSTRAINT_2;

CREATE TABLE 학생_2(
    학번 CHAR(5),
    이름 VARCHAR(20) NOT NULL,
    생일 DATE NOT NULL,
    연락처 VARCHAR(20),
    학과번호 CHAR(2),
    성별 CHAR(1),
    등록일 DATE DEFAULT CURDATE(),
    PRIMARY KEY (학번),
    CONSTRAINT UK_학생2_연락처 UNIQUE (연락처),
    CONSTRAINT CK_학생2_성별 CHECK (성별 IN ('남', '여')),
    CONSTRAINT FK_학생2_학과번호 FOREIGN KEY (학과번호) REFERENCES 학과(학과번호)
);

SELECT *
FROM INFORMAITION_SCHEMA.TABLE_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA ='그린개발'
	AND TABLE_NAME = '학생_2';
	
-- 수정평가테이블 생성
-- 과목테이블에서 레코드를 삭제하면
-- 수강평가 테이블에서도 해당과목에 대한
-- 평가레코드가 삭제되도록 옵션설정

CREATE TABLE 수강평가(
	평가순번 INT PRIMARY KEY AUTO_INCREMENT,
	학번 CHAR(5) NOT NULL,
	과목번호 CHAR(5) NOT NULL,
	평점 INT CHECK(평점 BETWEEN 0 AND 5),
	과목평가 VARCHAR(500),
	평가일시 DATETIME DEFAULT CURRENT_TIMESTAMP, --현재시간을 함께 
	FOREIGN KEY(학번) REFERENCES 학생(학번),
	FOREIGN KEY(과목번호) REFERENCES 과목(과목번호) ON DELETE CASCADE
);

INSERT INTO 수강평가(학번,과목번호,평점,과목평가)
VALUES('S0001','C0001',5,'좋아요!'),
      ('S0001','C0003',5,'GOOD'),
      ('S0002','C0003',4,'재밌어요'),
      ('S0003','C0003',4,'잠와요');

DELETE FROM 과목
WHERE 과목번호='C0003';

-- 예제) 영화 테이블과 평점관리테이블을 만들고자 함

-- 영화테이블
-- 컬럼명   데이터타입     제약조건
-- 영화번호 고정문자형 5자 기본키
-- 타이틀 가변문자형 100자 필수입력
-- 장르 가변문자형 20자 코미디,드라마,다큐,SF,액션,역사,기타만 입력가능
--  배우 가변 100 필수입력
-- 감독 가변 50 필수입력
-- 제작자 가변50 필수
-- 개봉일 날짜
-- 등록일 날짜 형 오늘날짜 자동입력


-- 2. 평점관리 테이블

-- 컬럼명   데이터타입     제약조건
-- 번호   숫자형 기본키,   일련번호 자동입력
-- 평가자닉네임 가변문자형 50 필수입력
-- 영화번호 고정문자형 5자 필수입력,영화테이블의 영화번호 참조
-- 평점 숫자형 필수입력, 1부터5사이의 값만 입력
-- 평가 가변 2000자 필수입력
-- 등록일 날짜형 오늘날짜 자동입력

CREATE TABLE 영화 (
    영화번호 CHAR(5) PRIMARY KEY,
    타이틀 VARCHAR(100) NOT NULL,
    장르 VARCHAR(20),
    배우 VARCHAR(100) NOT NULL,
    감독 VARCHAR(50) NOT NULL,
    제작자 VARCHAR(50) NOT NULL,
    개봉일 DATE,
    등록일 DATE DEFAULT (CURDATE()),
    CHECK (장르 IN ('코미디', '드라마', '다큐', 'SF', '액션', '기타'))
);

CREATE TABLE 평점관리 (
    번호 INT PRIMARY KEY AUTO_INCREMENT,
    평가자닉네임 VARCHAR(50) NOT NULL,
    영화번호 CHAR(5),
    평점 INT CHECK (평점 BETWEEN 1 AND 5),
    평가 VARCHAR(2000) NOT NULL,
    등록일 DATE DEFAULT CURDATE(),
    FOREIGN KEY (영화번호) REFERENCES 영화(영화번호)
);
-- 1 제품테이블의 재고 컬럼에 제약조건 추가
-- 조건 : 재고는 0보다 크거나 같아야함
ALTER TABLE 제품
ADD CONSTRAINT CH_제품_재고 CHECK (재고 >= 0);


-- 2. 제품 테이블에 재고금액 컬럼을 추가
-- 재고금액 : 단가*재고 가 자동 계산되어 저장되도록 함
ALTER TABLE 제품
ADD 재고금액INT AS(단가*재고) STORED;

ALTER TABLE 제품
ADD COLUMN 재고금액 INT AS (단가 * 재고) STORED;

-- 3. 제품 테이블에서 제품레코드를 삭제하면
-- 주문세부테이블에 있는 관련 레코드도 함께 삭제되도록
-- 주문세부 테이블의 제품번호 컬럼에
-- 외래키 제약조건과 옵션을 설정
ALTER TABLE 주문세부
ADD FOREIGN KEY(제품번호) REFERENCES 제품(제품번호)
ON DELETE CASCADE;


-- 사원 테이블을 사용하여 사원이름,
-- 집전화, 입사일, 주소를 사용하는 뷰(view_사원)를 생성
CREATE OR REPLACE VIEW view_사원
AS SELECT 이름, 집전화 AS 전화번호,
			 입사일,주소
FROM 사원;

SELECT * FROM view_사원;

-- 제품,주문세부 테이블을 조인하여 
-- 제품명과 주문수량 합을보이는 뷰를 작성 
CREATE OR REPLACE VIEW view_제품별주문수량합
AS SELECT 제품명, +SUM(주문수량)주문수량합
FROM 제품 INNER JOIN 주문세부
ON 제품.제품번호 = 주문세부.제품번호
GROUP BY 제품명;

SELECT * FROM view_제품별주문수량합;

-- '여'사원에 대해 이름, 집전화,입사일,주소,성별을 
-- 보여주는 view_사원_여 를 생성하시오.
CREATE OR REPLACE VIEW view_사원_여
AS SELECT 사원번호,이름,집전화,입사일,주소,성별
FROM 사원
WHERE 성별 = '여'
WITH CHECK OPTION;

SELECT * FROM view_사원_여;

-- view_사원_여 에서 전화번호가'88'이 들어간 사원의 정보
SELECT *
FROM view_사원_여
WHERE 집전화 LIKE'%88%';

-- 제품별로 주문수량의 합이 1200개 이상인 레코드
SELECT *
FROM view_제품별주문수량합
WHERE 주문수량합 >= 1200;

SELECT*
FROM INFORMATION_SCHEMA.VIEWS;

DROP VIEW view_사원;

INSERT INTO view_사원_여(사원번호,이름,집전화,입사일,주소,성별)
VALUES('E12','황지은','(02)456-7896','2024-03-01','서울시 강남구','여');

INSERT INTO view_사원_여(사원번호,이름,집전화,입사일,주소,성별)
VALUES('E13','전원우','(02)456-7896','2024-03-01','서울시 강남구','남');

SELECT * FROM  view_사원_여 WHERE 사원번호 = 'E13';

UPDATE view_사원_여
SET 성별 = '남'
WHERE 이름 = '황지은';